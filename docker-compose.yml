version: '3.8'

services:
  # ===================================
  # PostgreSQL Database
  # ===================================
  postgres:
    image: postgres:15-alpine
    container_name: reminder-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-reminder}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-reminder}
      POSTGRES_DB: ${POSTGRES_DB:-reminder_db}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-reminder}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - reminder-network
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ===================================
  # RabbitMQ Message Broker
  # ===================================
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: reminder-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-guest}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_VHOST:-/}
    ports:
      - "${RABBITMQ_PORT:-5672}:5672"       # AMQP port
      - "${RABBITMQ_MANAGEMENT_PORT:-15672}:15672"  # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - rabbitmq_logs:/var/log/rabbitmq
      - ./config/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
      - ./config/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - reminder-network
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ===================================
  # Redis Cache (Optional - for future use)
  # ===================================
  redis:
    image: redis:7-alpine
    container_name: reminder-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redispass}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - reminder-network
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # ===================================
  # User Service (Authentication)
  # ===================================
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
      args:
        GO_VERSION: 1.21
    container_name: user-service
    environment:
      PORT: ${USER_SERVICE_PORT:-8084}
      DATABASE_URL: "host=postgres user=${POSTGRES_USER:-reminder} password=${POSTGRES_PASSWORD:-reminder} dbname=${POSTGRES_DB:-reminder_db} port=5432 sslmode=disable"
      JWT_SECRET: ${JWT_SECRET:-your-secret-key-change-in-production}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-24h}
      REDIS_URL: "redis://:${REDIS_PASSWORD:-redispass}@redis:6379/0"
    ports:
      - "${USER_SERVICE_PORT:-8084}:8084"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - reminder-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8084/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ===================================
  # Reminder Service
  # ===================================
  reminder-service:
    build:
      context: ./reminder-service
      dockerfile: Dockerfile
      args:
        GO_VERSION: 1.21
    container_name: reminder-service
    environment:
      PORT: ${REMINDER_SERVICE_PORT:-8081}
      DATABASE_URL: "host=postgres user=${POSTGRES_USER:-reminder} password=${POSTGRES_PASSWORD:-reminder} dbname=${POSTGRES_DB:-reminder_db} port=5432 sslmode=disable"
      RABBITMQ_URL: "amqp://${RABBITMQ_USER:-guest}:${RABBITMQ_PASSWORD:-guest}@rabbitmq:5672/${RABBITMQ_VHOST:-/}"
      REDIS_URL: "redis://:${REDIS_PASSWORD:-redispass}@redis:6379/0"
      USER_SERVICE_URL: "http://user-service:8084"
      LOG_LEVEL: ${LOG_LEVEL:-info}
    ports:
      - "${REMINDER_SERVICE_PORT:-8081}:8081"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      user-service:
        condition: service_started
    networks:
      - reminder-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ===================================
  # Notification Service
  # ===================================
  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
      args:
        GO_VERSION: 1.21
    container_name: notification-service
    environment:
      PORT: ${NOTIFICATION_SERVICE_PORT:-8082}
      RABBITMQ_URL: "amqp://${RABBITMQ_USER:-guest}:${RABBITMQ_PASSWORD:-guest}@rabbitmq:5672/${RABBITMQ_VHOST:-/}"
      
      # Email Configuration (Home Mail Server)
      SMTP_HOST: ${SMTP_HOST:-mail.example.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      SMTP_FROM: ${SMTP_FROM:-noreply@reminder.local}
      SMTP_TLS: ${SMTP_TLS:-true}
      
      # SMS Configuration (Twilio)
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
      TWILIO_FROM_PHONE: ${TWILIO_FROM_PHONE}
      
      # Alternative SMS Providers
      SMS_PROVIDER: ${SMS_PROVIDER:-twilio}  # twilio, aws-sns, vonage
      AWS_SNS_REGION: ${AWS_SNS_REGION:-us-east-1}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      
      # Notification Settings
      MAX_RETRIES: ${NOTIFICATION_MAX_RETRIES:-3}
      RETRY_DELAY: ${NOTIFICATION_RETRY_DELAY:-5s}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    ports:
      - "${NOTIFICATION_SERVICE_PORT:-8082}:8082"
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - reminder-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ===================================
  # Scheduler Service
  # ===================================
  scheduler-service:
    build:
      context: ./scheduler-service
      dockerfile: Dockerfile
      args:
        GO_VERSION: 1.21
    container_name: scheduler-service
    environment:
      PORT: ${SCHEDULER_SERVICE_PORT:-8083}
      REMINDER_SERVICE_URL: "http://reminder-service:8081"
      RABBITMQ_URL: "amqp://${RABBITMQ_USER:-guest}:${RABBITMQ_PASSWORD:-guest}@rabbitmq:5672/${RABBITMQ_VHOST:-/}"
      
      # Scheduler Configuration
      CHECK_INTERVAL: ${SCHEDULER_CHECK_INTERVAL:-1m}
      LOOKAHEAD_WINDOW: ${SCHEDULER_LOOKAHEAD_WINDOW:-5m}
      BATCH_SIZE: ${SCHEDULER_BATCH_SIZE:-100}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    ports:
      - "${SCHEDULER_SERVICE_PORT:-8083}:8083"
    depends_on:
      reminder-service:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - reminder-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8083/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ===================================
  # API Gateway (Nginx)
  # ===================================
  api-gateway:
    image: nginx:1.25-alpine
    container_name: reminder-api-gateway
    ports:
      - "${API_GATEWAY_PORT:-8080}:80"
      - "${API_GATEWAY_SSL_PORT:-8443}:443"
    volumes:
      - ./api-gateway/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./api-gateway/conf.d:/etc/nginx/conf.d:ro
      - ./api-gateway/ssl:/etc/nginx/ssl:ro
      - api_gateway_logs:/var/log/nginx
    depends_on:
      - user-service
      - reminder-service
      - notification-service
      - scheduler-service
    networks:
      - reminder-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ===================================
  # Frontend (React Application)
  # ===================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        NODE_VERSION: 18
        REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:8080}
    container_name: reminder-frontend
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:8080}
      REACT_APP_VERSION: ${APP_VERSION:-1.0.0}
    ports:
      - "${FRONTEND_PORT:-3000}:80"
      - "${FRONTEND_SSL_PORT:-3443}:443"
    volumes:
      - ./frontend/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - api-gateway
    networks:
      - reminder-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ===================================
  # Monitoring - Prometheus (Optional)
  # ===================================
  prometheus:
    image: prom/prometheus:latest
    container_name: reminder-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - reminder-network
    restart: unless-stopped
    profiles:
      - monitoring

  # ===================================
  # Monitoring - Grafana (Optional)
  # ===================================
  grafana:
    image: grafana/grafana:latest
    container_name: reminder-grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - reminder-network
    restart: unless-stopped
    profiles:
      - monitoring

  # ===================================
  # Logging - Elasticsearch (Optional)
  # ===================================
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: reminder-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - "${ELASTICSEARCH_PORT:-9200}:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - reminder-network
    restart: unless-stopped
    profiles:
      - logging

  # ===================================
  # Logging - Kibana (Optional)
  # ===================================
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: reminder-kibana
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "${KIBANA_PORT:-5601}:5601"
    depends_on:
      - elasticsearch
    networks:
      - reminder-network
    restart: unless-stopped
    profiles:
      - logging

  # ===================================
  # pgAdmin (Optional - Database UI)
  # ===================================
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: reminder-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@reminder.local}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - reminder-network
    restart: unless-stopped
    profiles:
      - tools

# ===================================
# Networks
# ===================================
networks:
  reminder-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

# ===================================
# Volumes
# ===================================
volumes:
  postgres_data:
    driver: local
  rabbitmq_data:
    driver: local
  rabbitmq_logs:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  pgadmin_data:
    driver: local
  api_gateway_logs:
    driver: local