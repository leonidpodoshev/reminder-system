# ===================================
# config/rabbitmq/rabbitmq.conf
# ===================================
# RabbitMQ Configuration

# Networking
listeners.tcp.default = 5672
management.tcp.port = 15672

# Memory
vm_memory_high_watermark.relative = 0.6

# Disk
disk_free_limit.absolute = 2GB

# Logging
log.console = true
log.console.level = info


# ===================================
# config/rabbitmq/definitions.json
# ===================================
# RabbitMQ Queue and Exchange Definitions
{
  "rabbit_version": "3.12.0",
  "users": [
    {
      "name": "guest",
      "password_hash": "guest",
      "hashing_algorithm": "rabbit_password_hashing_sha256",
      "tags": "administrator"
    }
  ],
  "vhosts": [
    {
      "name": "/"
    }
  ],
  "permissions": [
    {
      "user": "guest",
      "vhost": "/",
      "configure": ".*",
      "write": ".*",
      "read": ".*"
    }
  ],
  "queues": [
    {
      "name": "notifications",
      "vhost": "/",
      "durable": true,
      "auto_delete": false,
      "arguments": {
        "x-message-ttl": 3600000,
        "x-max-length": 10000
      }
    },
    {
      "name": "reminders.dlq",
      "vhost": "/",
      "durable": true,
      "auto_delete": false,
      "arguments": {}
    }
  ],
  "exchanges": [
    {
      "name": "reminders",
      "vhost": "/",
      "type": "topic",
      "durable": true,
      "auto_delete": false,
      "internal": false,
      "arguments": {}
    }
  ],
  "bindings": [
    {
      "source": "reminders",
      "vhost": "/",
      "destination": "notifications",
      "destination_type": "queue",
      "routing_key": "reminder.notify",
      "arguments": {}
    }
  ]
}


# ===================================
# scripts/init-db.sql
# ===================================
-- PostgreSQL Initialization Script

-- Create database if it doesn't exist (already done by POSTGRES_DB)

-- Create extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "pg_trgm";

-- Create schemas
CREATE SCHEMA IF NOT EXISTS reminders;
CREATE SCHEMA IF NOT EXISTS users;
CREATE SCHEMA IF NOT EXISTS notifications;

-- Set search path
SET search_path TO reminders, users, notifications, public;

-- Create indexes for better performance (tables will be created by GORM)
-- These will run after the application creates tables

-- Grant permissions
GRANT ALL PRIVILEGES ON SCHEMA reminders TO reminder;
GRANT ALL PRIVILEGES ON SCHEMA users TO reminder;
GRANT ALL PRIVILEGES ON SCHEMA notifications TO reminder;
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA reminders TO reminder;
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA users TO reminder;
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA notifications TO reminder;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA reminders TO reminder;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA users TO reminder;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA notifications TO reminder;


# ===================================
# monitoring/prometheus/prometheus.yml
# ===================================
# Prometheus Configuration

global:
  scrape_interval: 15s
  evaluation_interval: 15s
  external_labels:
    cluster: 'reminder-system'
    environment: 'development'

# Alerting configuration
alerting:
  alertmanagers:
    - static_configs:
        - targets: []

# Scrape configurations
scrape_configs:
  # Prometheus itself
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']

  # User Service
  - job_name: 'user-service'
    static_configs:
      - targets: ['user-service:8084']
    metrics_path: '/metrics'

  # Reminder Service
  - job_name: 'reminder-service'
    static_configs:
      - targets: ['reminder-service:8081']
    metrics_path: '/metrics'

  # Notification Service
  - job_name: 'notification-service'
    static_configs:
      - targets: ['notification-service:8082']
    metrics_path: '/metrics'

  # Scheduler Service
  - job_name: 'scheduler-service'
    static_configs:
      - targets: ['scheduler-service:8083']
    metrics_path: '/metrics'

  # PostgreSQL Exporter
  - job_name: 'postgres'
    static_configs:
      - targets: ['postgres-exporter:9187']

  # RabbitMQ
  - job_name: 'rabbitmq'
    static_configs:
      - targets: ['rabbitmq:15692']

  # Redis
  - job_name: 'redis'
    static_configs:
      - targets: ['redis-exporter:9121']

  # Node Exporter (system metrics)
  - job_name: 'node'
    static_configs:
      - targets: ['node-exporter:9100']


# ===================================
# monitoring/grafana/provisioning/datasources/prometheus.yml
# ===================================
# Grafana Datasource Configuration

apiVersion: 1

datasources:
  - name: Prometheus
    type: prometheus
    access: proxy
    url: http://prometheus:9090
    isDefault: true
    editable: true
    jsonData:
      timeInterval: "15s"


# ===================================
# api-gateway/conf.d/rate-limiting.conf
# ===================================
# Nginx Rate Limiting Configuration

# Define rate limit zones
limit_req_zone $binary_remote_addr zone=general_limit:10m rate=100r/s;
limit_req_zone $binary_remote_addr zone=auth_limit:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=50r/s;

# Connection limits
limit_conn_zone $binary_remote_addr zone=conn_limit:10m;
limit_conn conn_limit 10;


# ===================================
# Makefile
# ===================================
# Project Makefile for common tasks

.PHONY: help build up down restart logs clean test

# Default target
help:
	@echo "Available commands:"
	@echo "  make build       - Build all Docker images"
	@echo "  make up          - Start all services"
	@echo "  make down        - Stop all services"
	@echo "  make restart     - Restart all services"
	@echo "  make logs        - View logs (all services)"
	@echo "  make logs-f      - Follow logs (all services)"
	@echo "  make clean       - Remove all containers and volumes"
	@echo "  make test        - Run tests"
	@echo "  make monitoring  - Start with monitoring stack"
	@echo "  make tools       - Start with development tools"

# Build all services
build:
	docker-compose build

# Start all services
up:
	docker-compose up -d

# Start with monitoring
monitoring:
	docker-compose --profile monitoring up -d

# Start with tools
tools:
	docker-compose --profile tools up -d

# Start everything
all:
	docker-compose --profile monitoring --profile logging --profile tools up -d

# Stop all services
down:
	docker-compose down

# Restart all services
restart:
	docker-compose restart

# View logs
logs:
	docker-compose logs

# Follow logs
logs-f:
	docker-compose logs -f

# View specific service logs
logs-%:
	docker-compose logs -f $*

# Clean everything (CAUTION: This removes volumes!)
clean:
	docker-compose down -v
	docker system prune -f

# Run tests
test:
	@echo "Running Go tests..."
	@cd reminder-service && go test ./...
	@cd notification-service && go test ./...
	@cd scheduler-service && go test ./...
	@cd user-service && go test ./...
	@echo "Running frontend tests..."
	@cd frontend && npm test -- --passWithNoTests

# Database migration
migrate-up:
	@echo "Running database migrations..."
	docker-compose exec reminder-service /app/migrate up

migrate-down:
	@echo "Rolling back database migrations..."
	docker-compose exec reminder-service /app/migrate down

# Database backup
db-backup:
	@echo "Creating database backup..."
	docker-compose exec postgres pg_dump -U reminder reminder_db > backup_$(shell date +%Y%m%d_%H%M%S).sql

# Database restore
db-restore:
	@echo "Restoring database from backup..."
	@read -p "Enter backup file name: " file; \
	docker-compose exec -T postgres psql -U reminder reminder_db < $file

# Check service health
health:
	@echo "Checking service health..."
	@curl -s http://localhost:8084/health | jq . || echo "User Service: DOWN"
	@curl -s http://localhost:8081/health | jq . || echo "Reminder Service: DOWN"
	@curl -s http://localhost:8082/health | jq . || echo "Notification Service: DOWN"
	@curl -s http://localhost:8083/health | jq . || echo "Scheduler Service: DOWN"

# Development setup
dev-setup:
	@echo "Setting up development environment..."
	cp .env.example .env
	@echo "Please edit .env file with your configuration"
	mkdir -p api-gateway/conf.d api-gateway/ssl
	mkdir -p config/rabbitmq
	mkdir -p monitoring/prometheus monitoring/grafana/provisioning/datasources monitoring/grafana/dashboards
	mkdir -p scripts

# Install Go dependencies
go-deps:
	@echo "Installing Go dependencies..."
	cd reminder-service && go mod download
	cd notification-service && go mod download
	cd scheduler-service && go mod download
	cd user-service && go mod download

# Install frontend dependencies
frontend-deps:
	@echo "Installing frontend dependencies..."
	cd frontend && npm install

# Format code
format:
	@echo "Formatting Go code..."
	cd reminder-service && go fmt ./...
	cd notification-service && go fmt ./...
	cd scheduler-service && go fmt ./...
	cd user-service && go fmt ./...
	@echo "Formatting frontend code..."
	cd frontend && npm run format

# Lint code
lint:
	@echo "Linting Go code..."
	cd reminder-service && golangci-lint run
	cd notification-service && golangci-lint run
	cd scheduler-service && golangci-lint run
	cd user-service && golangci-lint run
	@echo "Linting frontend code..."
	cd frontend && npm run lint

# Generate API documentation
docs:
	@echo "Generating API documentation..."
	docker run --rm -v ${PWD}:/spec redocly/openapi-cli bundle api/openapi.yaml -o docs/api.html


# ===================================
# docker-compose.override.yml (for local development)
# ===================================
# This file is automatically used by docker-compose
# Use it for local development overrides

version: '3.8'

services:
  # Override services for development
  reminder-service:
    volumes:
      - ./reminder-service:/app
    command: air  # Use air for hot reload in development

  notification-service:
    volumes:
      - ./notification-service:/app
    command: air

  scheduler-service:
    volumes:
      - ./scheduler-service:/app
    command: air

  user-service:
    volumes:
      - ./user-service:/app
    command: air

  frontend:
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
    environment:
      - CHOKIDAR_USEPOLLING=true  # For hot reload on some systems


# ===================================
# .dockerignore
# ===================================
# Docker ignore file (create in each service directory)

# Git
.git
.gitignore
.gitattributes

# CI/CD
.github
.gitlab-ci.yml
.travis.yml

# Documentation
README.md
docs/
*.md

# Tests
*_test.go
test/
tests/
__tests__/
coverage/

# Build artifacts
bin/
build/
dist/
*.exe
*.dll
*.so
*.dylib

# Dependencies
node_modules/
vendor/

# Environment
.env
.env.*
!.env.example

# IDE
.vscode/
.idea/
*.swp
*.swo
*~

# OS
.DS_Store
Thumbs.db

# Logs
*.log
logs/


# ===================================
# scripts/wait-for-it.sh
# ===================================
#!/bin/bash
# Wait for service to be ready script

set -e

host="$1"
shift
cmd="$@"

until nc -z "$host" 2>/dev/null; do
  >&2 echo "Service $host is unavailable - sleeping"
  sleep 1
done

>&2 echo "Service $host is up - executing command"
exec $cmd


# ===================================
# scripts/health-check.sh
# ===================================
#!/bin/bash
# Health check script for services

SERVICE_URL="${1:-http://localhost:8080}"

response=$(curl -s -o /dev/null -w "%{http_code}" "$SERVICE_URL/health")

if [ "$response" = "200" ]; then
    echo "Service is healthy"
    exit 0
else
    echo "Service is unhealthy (HTTP $response)"
    exit 1
fi


# ===================================
# scripts/backup.sh
# ===================================
#!/bin/bash
# Backup script for database and volumes

BACKUP_DIR="./backups/$(date +%Y%m%d_%H%M%S)"
mkdir -p "$BACKUP_DIR"

echo "Creating backup in $BACKUP_DIR..."

# Backup PostgreSQL
docker-compose exec -T postgres pg_dump -U reminder reminder_db > "$BACKUP_DIR/postgres.sql"

# Backup RabbitMQ definitions
docker-compose exec -T rabbitmq rabbitmqctl export_definitions /tmp/definitions.json
docker cp reminder-rabbitmq:/tmp/definitions.json "$BACKUP_DIR/rabbitmq-definitions.json"

# Backup volumes
docker run --rm -v reminder-system_postgres_data:/data -v $(pwd)/$BACKUP_DIR:/backup alpine tar czf /backup/postgres_data.tar.gz -C /data .
docker run --rm -v reminder-system_rabbitmq_data:/data -v $(pwd)/$BACKUP_DIR:/backup alpine tar czf /backup/rabbitmq_data.tar.gz -C /data .

echo "Backup completed: $BACKUP_DIR"


# ===================================
# scripts/restore.sh
# ===================================
#!/bin/bash
# Restore script for database and volumes

BACKUP_DIR="$1"

if [ -z "$BACKUP_DIR" ]; then
    echo "Usage: $0 <backup_directory>"
    exit 1
fi

if [ ! -d "$BACKUP_DIR" ]; then
    echo "Backup directory not found: $BACKUP_DIR"
    exit 1
fi

echo "Restoring from $BACKUP_DIR..."

# Stop services
docker-compose down

# Restore PostgreSQL
if [ -f "$BACKUP_DIR/postgres.sql" ]; then
    docker-compose up -d postgres
    sleep 10
    docker-compose exec -T postgres psql -U reminder reminder_db < "$BACKUP_DIR/postgres.sql"
fi

# Restore volumes
if [ -f "$BACKUP_DIR/postgres_data.tar.gz" ]; then
    docker run --rm -v reminder-system_postgres_data:/data -v $(pwd)/$BACKUP_DIR:/backup alpine tar xzf /backup/postgres_data.tar.gz -C /data
fi

if [ -f "$BACKUP_DIR/rabbitmq_data.tar.gz" ]; then
    docker run --rm -v reminder-system_rabbitmq_data:/data -v $(pwd)/$BACKUP_DIR:/backup alpine tar xzf /backup/rabbitmq_data.tar.gz -C /data
fi

# Start services
docker-compose up -d

echo "Restore completed"


# ===================================
# scripts/generate-ssl.sh
# ===================================
#!/bin/bash
# Generate self-signed SSL certificates for development

CERT_DIR="./api-gateway/ssl"
mkdir -p "$CERT_DIR"

openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
  -keyout "$CERT_DIR/nginx-selfsigned.key" \
  -out "$CERT_DIR/nginx-selfsigned.crt" \
  -subj "/C=US/ST=State/L=City/O=Organization/CN=localhost"

openssl dhparam -out "$CERT_DIR/dhparam.pem" 2048

echo "SSL certificates generated in $CERT_DIR"


# ===================================
# README-DOCKER.md
# ===================================
# Docker Compose Usage Guide

## Quick Start

### 1. Initial Setup
```bash
# Copy environment template
cp .env.example .env

# Edit .env with your configuration
nano .env

# Create necessary directories
make dev-setup
```

### 2. Start Services

**Basic services (default):**
```bash
docker-compose up -d
```

**With monitoring (Prometheus + Grafana):**
```bash
docker-compose --profile monitoring up -d
```

**With logging (ELK Stack):**
```bash
docker-compose --profile logging up -d
```

**With development tools (pgAdmin):**
```bash
docker-compose --profile tools up -d
```

**Everything:**
```bash
make all
```

### 3. Access Services

| Service | URL | Credentials |
|---------|-----|-------------|
| Frontend | http://localhost:3000 | - |
| API Gateway | http://localhost:8080 | - |
| RabbitMQ Management | http://localhost:15672 | guest/guest |
| Prometheus | http://localhost:9090 | - |
| Grafana | http://localhost:3001 | admin/admin |
| pgAdmin | http://localhost:5050 | admin@reminder.local/admin |
| Kibana | http://localhost:5601 | - |

## Common Commands

### Service Management
```bash
# Start all services
docker-compose up -d

# Stop all services
docker-compose down

# Restart a specific service
docker-compose restart reminder-service

# View logs
docker-compose logs -f reminder-service

# Scale a service
docker-compose up -d --scale reminder-service=3
```

### Development
```bash
# Rebuild a service
docker-compose build reminder-service

# Rebuild without cache
docker-compose build --no-cache reminder-service

# Execute command in running container
docker-compose exec reminder-service sh

# Run one-off command
docker-compose run --rm reminder-service go test
```

### Database Operations
```bash
# Access PostgreSQL
docker-compose exec postgres psql -U reminder reminder_db

# Backup database
make db-backup

# Restore database
make db-restore

# View database logs
docker-compose logs postgres
```

### Monitoring
```bash
# Check service health
make health

# View resource usage
docker stats

# Inspect a container
docker inspect reminder-service
```

## Profiles Explained

### monitoring
Includes:
- Prometheus (metrics collection)
- Grafana (visualization)

### logging
Includes:
- Elasticsearch (log storage)
- Kibana (log visualization)

### tools
Includes:
- pgAdmin (database management)

## Troubleshooting

### Services won't start
```bash
# Check logs
docker-compose logs

# Check specific service
docker-compose logs reminder-service

# Verify configuration
docker-compose config
```

### Port conflicts
```bash
# Change ports in .env file
nano .env

# Or use docker-compose.override.yml
```

### Database connection issues
```bash
# Verify database is running
docker-compose ps postgres

# Check database logs
docker-compose logs postgres

# Test connection
docker-compose exec postgres psql -U reminder -d reminder_db -c "SELECT 1"
```

### Clear everything and start fresh
```bash
# WARNING: This removes all data!
make clean
docker-compose up -d
```

## Performance Tuning

### Resource Limits
Add to service definition:
```yaml
deploy:
  resources:
    limits:
      cpus: '0.5'
      memory: 512M
    reservations:
      cpus: '0.25'
      memory: 256M
```

### Scaling
```bash
# Scale reminder service to 3 instances
docker-compose up -d --scale reminder-service=3

# Load balance with nginx
```