events {
    worker_connections 1024;
}

http {
    upstream reminder_service {
        server reminder-service:8081;
    }

    upstream notification_service {
        server notification-service:8082;
    }

    upstream scheduler_service {
        server scheduler-service:8083;
    }

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;

    server {
        listen 80;
        server_name localhost;

        # Global CORS headers
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization, X-User-ID' always;

        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            return 204;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "API Gateway is healthy\n";
            add_header Content-Type text/plain;
        }

        # Serve a complete frontend page
        location / {
            return 200 '<!DOCTYPE html>
<html>
<head>
    <title>Memo - Reminder System</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <style>
        body { font-family: Arial, sans-serif; max-width: 1000px; margin: 0 auto; padding: 20px; background: #f8f9fa; }
        .container { background: white; padding: 30px; border-radius: 12px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        .status { padding: 15px; margin: 15px 0; border-radius: 8px; }
        .success { background: #d4edda; color: #155724; border: 1px solid #c3e6cb; }
        .info { background: #d1ecf1; color: #0c5460; border: 1px solid #bee5eb; }
        .error { background: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }
        button { background: #007bff; color: white; padding: 12px 24px; border: none; border-radius: 6px; cursor: pointer; margin: 8px 4px; font-size: 14px; }
        button:hover { background: #0056b3; }
        button.success { background: #28a745; }
        button.success:hover { background: #218838; }
        input, textarea, select { width: 100%; padding: 12px; margin: 8px 0; border: 1px solid #ddd; border-radius: 6px; font-size: 14px; box-sizing: border-box; }
        .form-group { margin: 20px 0; }
        .form-row { display: flex; gap: 15px; }
        .form-row .form-group { flex: 1; }
        label { display: block; margin-bottom: 5px; font-weight: bold; color: #333; }
        .section { margin: 30px 0; padding: 20px; border: 1px solid #e9ecef; border-radius: 8px; }
        .reminder-item { background: #f8f9fa; padding: 15px; margin: 10px 0; border-radius: 6px; border-left: 4px solid #007bff; }
        .reminder-item.sent { border-left-color: #28a745; }
        .reminder-item.failed { border-left-color: #dc3545; }
        h1 { color: #333; margin-bottom: 10px; }
        h2 { color: #495057; border-bottom: 2px solid #e9ecef; padding-bottom: 10px; }
        pre { background: #f8f9fa; padding: 15px; border-radius: 6px; overflow-x: auto; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üîî Memo - Reminder System</h1>
        <div class="status success">
            <strong>‚úÖ System Status:</strong> Production deployment running successfully!
        </div>

        <div class="section">
            <h2>üìù Create New Reminder</h2>
            <form id="reminderForm">
                <div class="form-row">
                    <div class="form-group">
                        <label for="title">Title *</label>
                        <input type="text" id="title" name="title" required placeholder="Enter reminder title">
                    </div>
                    <div class="form-group">
                        <label for="notificationType">Notification Type *</label>
                        <select id="notificationType" name="notification_type" required onchange="toggleNotificationFields()">
                            <option value="email">Email</option>
                            <option value="sms">SMS</option>
                        </select>
                    </div>
                </div>
                
                <div class="form-group">
                    <label for="description">Description</label>
                    <textarea id="description" name="description" rows="3" placeholder="Enter reminder description (optional)"></textarea>
                </div>
                
                <div class="form-row">
                    <div class="form-group">
                        <label for="datetime">Date & Time *</label>
                        <input type="datetime-local" id="datetime" name="datetime" required>
                    </div>
                    <div class="form-group" id="emailGroup">
                        <label for="email">Email Address *</label>
                        <input type="email" id="email" name="email" placeholder="your@email.com">
                    </div>
                    <div class="form-group" id="phoneGroup" style="display: none;">
                        <label for="phone">Phone Number *</label>
                        <input type="tel" id="phone" name="phone" placeholder="+1234567890">
                    </div>
                </div>
                
                <button type="submit" class="success">Create Reminder</button>
                <button type="button" onclick="clearForm()">Clear Form</button>
            </form>
        </div>

        <div class="section">
            <h2>üìã Your Reminders</h2>
            <button onclick="loadReminders()">Refresh Reminders</button>
            <button onclick="testAPI()">Test API Health</button>
            <div id="reminders" style="margin-top: 20px;"></div>
        </div>

        <div class="section">
            <h2>üîß System Information</h2>
            <p><strong>Deployment:</strong> Production Mode</p>
            <p><strong>Version:</strong> 1.0.0</p>
            <p><strong>API Endpoint:</strong> <a href="/health">/health</a></p>
            <div id="result" style="margin-top: 15px; padding: 15px; background: #f8f9fa; border-radius: 6px; min-height: 50px;"></div>
        </div>
    </div>

    <script>
        // Set default datetime to 1 hour from now
        document.addEventListener("DOMContentLoaded", function() {
            const now = new Date();
            now.setHours(now.getHours() + 1);
            document.getElementById("datetime").value = now.toISOString().slice(0, 16);
            loadReminders();
        });

        function toggleNotificationFields() {
            const type = document.getElementById("notificationType").value;
            const emailGroup = document.getElementById("emailGroup");
            const phoneGroup = document.getElementById("phoneGroup");
            
            if (type === "email") {
                emailGroup.style.display = "block";
                phoneGroup.style.display = "none";
                document.getElementById("email").required = true;
                document.getElementById("phone").required = false;
            } else {
                emailGroup.style.display = "none";
                phoneGroup.style.display = "block";
                document.getElementById("email").required = false;
                document.getElementById("phone").required = true;
            }
        }

        document.getElementById("reminderForm").addEventListener("submit", function(e) {
            e.preventDefault();
            createReminder();
        });

        function createReminder() {
            const formData = new FormData(document.getElementById("reminderForm"));
            const data = {
                title: formData.get("title"),
                description: formData.get("description") || "",
                datetime: new Date(formData.get("datetime")).toISOString(),
                notification_type: formData.get("notification_type"),
                email: formData.get("email") || "",
                phone: formData.get("phone") || ""
            };

            fetch("/api/reminders?user_id=default-user", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(data)
            })
            .then(response => response.json())
            .then(data => {
                document.getElementById("result").innerHTML = `<div class="success">‚úÖ <strong>Reminder created successfully!</strong><br>ID: ${data.id}</div>`;
                clearForm();
                loadReminders();
            })
            .catch(error => {
                document.getElementById("result").innerHTML = `<div class="error">‚ùå <strong>Error creating reminder:</strong> ${error}</div>`;
            });
        }

        function clearForm() {
            document.getElementById("reminderForm").reset();
            const now = new Date();
            now.setHours(now.getHours() + 1);
            document.getElementById("datetime").value = now.toISOString().slice(0, 16);
            toggleNotificationFields();
        }

        function testAPI() {
            fetch("/health")
                .then(response => response.text())
                .then(data => {
                    document.getElementById("result").innerHTML = `<div class="success">‚úÖ <strong>API Health:</strong> ${data}</div>`;
                })
                .catch(error => {
                    document.getElementById("result").innerHTML = `<div class="error">‚ùå <strong>API Error:</strong> ${error}</div>`;
                });
        }

        function loadReminders() {
            fetch("/api/reminders?user_id=default-user")
                .then(response => response.json())
                .then(data => {
                    let html = "";
                    if (data.length === 0) {
                        html = "<p>No reminders found. Create your first reminder above!</p>";
                    } else {
                        data.forEach(reminder => {
                            const date = new Date(reminder.datetime).toLocaleString();
                            const statusClass = reminder.status === "sent" ? "sent" : reminder.status === "failed" ? "failed" : "";
                            html += `
                                <div class="reminder-item ${statusClass}">
                                    <h4>${reminder.title}</h4>
                                    <p><strong>Description:</strong> ${reminder.description || "None"}</p>
                                    <p><strong>Scheduled:</strong> ${date}</p>
                                    <p><strong>Type:</strong> ${reminder.notification_type.toUpperCase()}</p>
                                    <p><strong>Status:</strong> <span style="text-transform: capitalize;">${reminder.status}</span></p>
                                    <p><strong>Contact:</strong> ${reminder.email || reminder.phone || "N/A"}</p>
                                </div>
                            `;
                        });
                    }
                    document.getElementById("reminders").innerHTML = html;
                })
                .catch(error => {
                    document.getElementById("reminders").innerHTML = `<div class="error">‚ùå Error loading reminders: ${error}</div>`;
                });
        }
    </script>
</body>
</html>';
            add_header Content-Type text/html;
        }

        # Reminder Service routes
        location /api/reminders {
            limit_req zone=api_limit burst=20 nodelay;
            
            proxy_pass http://reminder_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Hide backend CORS headers to prevent duplicates
            proxy_hide_header 'Access-Control-Allow-Origin';
            proxy_hide_header 'Access-Control-Allow-Methods';
            proxy_hide_header 'Access-Control-Allow-Headers';
            
            # Timeout settings
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # Notification Service routes
        location /api/notifications {
            limit_req zone=api_limit burst=10 nodelay;
            
            proxy_pass http://notification_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Hide backend CORS headers to prevent duplicates
            proxy_hide_header 'Access-Control-Allow-Origin';
            proxy_hide_header 'Access-Control-Allow-Methods';
            proxy_hide_header 'Access-Control-Allow-Headers';
        }

        # Scheduler Service routes
        location /api/scheduler {
            limit_req zone=api_limit burst=5 nodelay;
            
            proxy_pass http://scheduler_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Hide backend CORS headers to prevent duplicates
            proxy_hide_header 'Access-Control-Allow-Origin';
            proxy_hide_header 'Access-Control-Allow-Methods';
            proxy_hide_header 'Access-Control-Allow-Headers';
        }

        # Default error pages
        error_page 404 /404.html;
        location = /404.html {
            return 404 '{"error": "Not Found"}';
            add_header Content-Type application/json;
        }

        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            return 500 '{"error": "Internal Server Error"}';
            add_header Content-Type application/json;
        }
    }
}