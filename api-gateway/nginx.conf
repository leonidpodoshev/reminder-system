events {
    worker_connections 1024;
}

http {
    upstream reminder_service {
        server reminder-service:8081;
    }

    upstream notification_service {
        server notification-service:8082;
    }

    upstream scheduler_service {
        server scheduler-service:8083;
    }

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;

    server {
        listen 80;
        server_name localhost;

        # Global CORS headers
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization, X-User-ID' always;

        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            return 204;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "API Gateway is healthy\n";
            add_header Content-Type text/plain;
        }

        # Serve a simple frontend page
        location / {
            return 200 '<!DOCTYPE html>
<html>
<head>
    <title>Memo - Reminder System</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <style>
        body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
        .container { background: #f5f5f5; padding: 20px; border-radius: 8px; }
        .status { padding: 10px; margin: 10px 0; border-radius: 4px; }
        .success { background: #d4edda; color: #155724; border: 1px solid #c3e6cb; }
        .info { background: #d1ecf1; color: #0c5460; border: 1px solid #bee5eb; }
        button { background: #007bff; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer; margin: 5px; }
        button:hover { background: #0056b3; }
        input, textarea { width: 100%; padding: 8px; margin: 5px 0; border: 1px solid #ddd; border-radius: 4px; }
        .form-group { margin: 15px 0; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üîî Memo - Reminder System</h1>
        <div class="status success">
            <strong>‚úÖ System Status:</strong> API Gateway is healthy and running!
        </div>
        
        <div class="info">
            <strong>üìç Access Points:</strong><br>
            ‚Ä¢ API: <a href="/health">http://memo:8080</a><br>
            ‚Ä¢ Frontend: You are here!<br>
            ‚Ä¢ Full React App: <a href="http://memo:3001">http://memo:3001</a> (when available)
        </div>

        <h2>Quick API Test</h2>
        <button onclick="testAPI()">Test API Health</button>
        <button onclick="listReminders()">List Reminders</button>
        <div id="result" style="margin-top: 20px; padding: 10px; background: white; border-radius: 4px;"></div>

        <h2>System Information</h2>
        <p><strong>Deployment:</strong> Production Mode</p>
        <p><strong>Version:</strong> 1.0.0</p>
        <p><strong>Services:</strong> All core services running</p>
    </div>

    <script>
        function testAPI() {
            fetch("/health")
                .then(response => response.text())
                .then(data => {
                    document.getElementById("result").innerHTML = "<strong>API Health:</strong> " + data;
                })
                .catch(error => {
                    document.getElementById("result").innerHTML = "<strong>Error:</strong> " + error;
                });
        }

        function listReminders() {
            fetch("/api/reminders?user_id=default-user")
                .then(response => response.json())
                .then(data => {
                    document.getElementById("result").innerHTML = "<strong>Reminders:</strong><pre>" + JSON.stringify(data, null, 2) + "</pre>";
                })
                .catch(error => {
                    document.getElementById("result").innerHTML = "<strong>Error:</strong> " + error;
                });
        }
    </script>
</body>
</html>';
            add_header Content-Type text/html;
        }

        # Reminder Service routes
        location /api/reminders {
            limit_req zone=api_limit burst=20 nodelay;
            
            proxy_pass http://reminder_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Hide backend CORS headers to prevent duplicates
            proxy_hide_header 'Access-Control-Allow-Origin';
            proxy_hide_header 'Access-Control-Allow-Methods';
            proxy_hide_header 'Access-Control-Allow-Headers';
            
            # Timeout settings
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # Notification Service routes
        location /api/notifications {
            limit_req zone=api_limit burst=10 nodelay;
            
            proxy_pass http://notification_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Hide backend CORS headers to prevent duplicates
            proxy_hide_header 'Access-Control-Allow-Origin';
            proxy_hide_header 'Access-Control-Allow-Methods';
            proxy_hide_header 'Access-Control-Allow-Headers';
        }

        # Scheduler Service routes
        location /api/scheduler {
            limit_req zone=api_limit burst=5 nodelay;
            
            proxy_pass http://scheduler_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Hide backend CORS headers to prevent duplicates
            proxy_hide_header 'Access-Control-Allow-Origin';
            proxy_hide_header 'Access-Control-Allow-Methods';
            proxy_hide_header 'Access-Control-Allow-Headers';
        }

        # Default error pages
        error_page 404 /404.html;
        location = /404.html {
            return 404 '{"error": "Not Found"}';
            add_header Content-Type application/json;
        }

        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            return 500 '{"error": "Internal Server Error"}';
            add_header Content-Type application/json;
        }
    }
}